<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="Timeline" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="307" y="183">
              <bitmap>media/images/box/movement/move.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="220">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Say" id="2" localization="8" tooltip="Say some text. The text can be localized." x="273" y="287">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Me presento, mi nombre es NAO," default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                    </Diagram>
                  </BehaviorKeyframe>
                  <BehaviorKeyframe name="keyframe80" index="80">
                    <Diagram>
                      <Box name="Say" id="2" localization="8" tooltip="Say some text. The text can be localized." x="342" y="265">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Soy un robot," default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                    </Diagram>
                  </BehaviorKeyframe>
                  <BehaviorKeyframe name="keyframe134" index="134">
                    <Diagram>
                      <Box name="Say" id="2" localization="8" tooltip="Say some text. The text can be localized." x="223" y="233">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="puedo hablar," default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
                <ActuatorList model="">
                  <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                    <Key frame="17" value="1.57965" />
                    <Key frame="34" value="2.37068" />
                    <Key frame="51" value="2.37068" />
                    <Key frame="66" value="-8.5279" />
                    <Key frame="83" value="-7.73688" />
                    <Key frame="101" value="-7.73688" />
                    <Key frame="125" value="-7.73688" />
                    <Key frame="140" value="-7.56109" />
                    <Key frame="158" value="-7.73688" />
                    <Key frame="173" value="-8.17634" />
                    <Key frame="182" value="-8.17634" />
                    <Key frame="190" value="-7.73688" />
                    <Key frame="196" value="-7.73688" />
                    <Key frame="205" value="-7.38531" />
                    <Key frame="220" value="-7.73688" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                    <Key frame="17" value="-2.11181" />
                    <Key frame="34" value="-2.11181" />
                    <Key frame="51" value="-2.11181" />
                    <Key frame="66" value="0.788627" />
                    <Key frame="83" value="-0.266077" />
                    <Key frame="101" value="-0.266077" />
                    <Key frame="125" value="-0.266077" />
                    <Key frame="140" value="-0.266077" />
                    <Key frame="158" value="-0.266077" />
                    <Key frame="173" value="-0.266077" />
                    <Key frame="182" value="-0.266077" />
                    <Key frame="190" value="-0.266077" />
                    <Key frame="196" value="-0.266077" />
                    <Key frame="205" value="-0.353968" />
                    <Key frame="220" value="-0.266077" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                    <Key frame="17" value="4.74374" />
                    <Key frame="34" value="4.56796" />
                    <Key frame="51" value="4.48007" />
                    <Key frame="66" value="5.18321" />
                    <Key frame="83" value="5.35899" />
                    <Key frame="101" value="5.35899" />
                    <Key frame="125" value="5.35899" />
                    <Key frame="140" value="5.53478" />
                    <Key frame="158" value="5.35899" />
                    <Key frame="173" value="5.18321" />
                    <Key frame="182" value="5.00743" />
                    <Key frame="190" value="5.35899" />
                    <Key frame="196" value="5.35899" />
                    <Key frame="205" value="5.00743" />
                    <Key frame="220" value="5.35899" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                    <Key frame="17" value="-6.32579" />
                    <Key frame="34" value="-6.32579" />
                    <Key frame="51" value="-6.32579" />
                    <Key frame="66" value="-6.4137" />
                    <Key frame="83" value="-6.85315" />
                    <Key frame="101" value="-6.85315" />
                    <Key frame="125" value="-6.85315" />
                    <Key frame="140" value="-6.85315" />
                    <Key frame="158" value="-6.85315" />
                    <Key frame="173" value="-6.85315" />
                    <Key frame="182" value="-6.85315" />
                    <Key frame="190" value="-6.85315" />
                    <Key frame="196" value="-6.85315" />
                    <Key frame="205" value="-6.85315" />
                    <Key frame="220" value="-6.85315" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                    <Key frame="17" value="-67.2348" />
                    <Key frame="34" value="-44.3829" />
                    <Key frame="51" value="-36.9121" />
                    <Key frame="66" value="-23.4647" />
                    <Key frame="83" value="-87.7135" />
                    <Key frame="101" value="-87.362" />
                    <Key frame="125" value="-87.362" />
                    <Key frame="140" value="-86.5709" />
                    <Key frame="158" value="-87.362" />
                    <Key frame="173" value="-86.7467" />
                    <Key frame="182" value="-86.8346" />
                    <Key frame="190" value="-86.7467" />
                    <Key frame="196" value="-86.7467" />
                    <Key frame="205" value="-77.0786" />
                    <Key frame="220" value="-12.5661" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                    <Key frame="17" value="-44.2119" />
                    <Key frame="34" value="-49.9249" />
                    <Key frame="51" value="-59.1535" />
                    <Key frame="66" value="-67.1517" />
                    <Key frame="83" value="-20.0417" />
                    <Key frame="101" value="-65.306" />
                    <Key frame="125" value="-65.306" />
                    <Key frame="140" value="-63.2844" />
                    <Key frame="158" value="-65.306" />
                    <Key frame="173" value="-63.0208" />
                    <Key frame="182" value="-63.4602" />
                    <Key frame="190" value="-65.306" />
                    <Key frame="196" value="-65.306" />
                    <Key frame="205" value="-54.7589" />
                    <Key frame="220" value="-33.8407" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                    <Key frame="17" value="0.2892" />
                    <Key frame="34" value="0.2892" />
                    <Key frame="51" value="0.7032" />
                    <Key frame="66" value="0.2936" />
                    <Key frame="83" value="0.3048" />
                    <Key frame="101" value="0.3048" />
                    <Key frame="125" value="0.3048" />
                    <Key frame="140" value="0.3092" />
                    <Key frame="158" value="0.3048" />
                    <Key frame="173" value="0.3092" />
                    <Key frame="182" value="0.3092" />
                    <Key frame="190" value="0.3048" />
                    <Key frame="196" value="0.3048" />
                    <Key frame="205" value="0.302" />
                    <Key frame="220" value="0.3048" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                    <Key frame="17" value="7.29742" />
                    <Key frame="34" value="7.29742" />
                    <Key frame="51" value="7.29742" />
                    <Key frame="66" value="6.94585" />
                    <Key frame="83" value="6.94585" />
                    <Key frame="101" value="6.94585" />
                    <Key frame="125" value="6.94585" />
                    <Key frame="140" value="6.94585" />
                    <Key frame="158" value="6.94585" />
                    <Key frame="173" value="6.94585" />
                    <Key frame="182" value="6.94585" />
                    <Key frame="190" value="6.94585" />
                    <Key frame="196" value="6.94585" />
                    <Key frame="205" value="6.94585" />
                    <Key frame="220" value="6.94585" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                    <Key frame="17" value="6.5064" />
                    <Key frame="34" value="6.5064" />
                    <Key frame="51" value="6.5064" />
                    <Key frame="66" value="7.12163" />
                    <Key frame="83" value="6.85796" />
                    <Key frame="101" value="7.4732" />
                    <Key frame="125" value="7.4732" />
                    <Key frame="140" value="7.4732" />
                    <Key frame="158" value="7.4732" />
                    <Key frame="173" value="7.4732" />
                    <Key frame="182" value="7.4732" />
                    <Key frame="190" value="7.4732" />
                    <Key frame="196" value="7.4732" />
                    <Key frame="205" value="7.4732" />
                    <Key frame="220" value="7.4732" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                    <Key frame="17" value="-9.66569" />
                    <Key frame="34" value="-9.66569" />
                    <Key frame="51" value="-9.66569" />
                    <Key frame="66" value="-9.84147" />
                    <Key frame="83" value="-9.66569" />
                    <Key frame="101" value="-9.66569" />
                    <Key frame="125" value="-9.66569" />
                    <Key frame="140" value="-9.66569" />
                    <Key frame="158" value="-9.66569" />
                    <Key frame="173" value="-9.66569" />
                    <Key frame="182" value="-9.66569" />
                    <Key frame="190" value="-9.66569" />
                    <Key frame="196" value="-9.66569" />
                    <Key frame="205" value="-9.66569" />
                    <Key frame="220" value="-9.66569" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                    <Key frame="17" value="-5.71537" />
                    <Key frame="34" value="-5.71537" />
                    <Key frame="51" value="-5.71537" />
                    <Key frame="66" value="-5.18802" />
                    <Key frame="83" value="-5.18802" />
                    <Key frame="101" value="-5.18802" />
                    <Key frame="125" value="-5.18802" />
                    <Key frame="140" value="-5.18802" />
                    <Key frame="158" value="-5.18802" />
                    <Key frame="173" value="-5.18802" />
                    <Key frame="182" value="-5.18802" />
                    <Key frame="190" value="-5.18802" />
                    <Key frame="196" value="-5.18802" />
                    <Key frame="205" value="-5.18802" />
                    <Key frame="220" value="-5.18802" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                    <Key frame="17" value="49.4806" />
                    <Key frame="34" value="82.44" />
                    <Key frame="51" value="52.3811" />
                    <Key frame="66" value="82.7037" />
                    <Key frame="83" value="25.9256" />
                    <Key frame="101" value="-4.3091" />
                    <Key frame="125" value="-4.3091" />
                    <Key frame="140" value="-0.00240423" />
                    <Key frame="158" value="-4.3091" />
                    <Key frame="173" value="0.261268" />
                    <Key frame="182" value="1.49175" />
                    <Key frame="190" value="-1.93602" />
                    <Key frame="196" value="-1.93602" />
                    <Key frame="205" value="53.8752" />
                    <Key frame="220" value="74.1782" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                    <Key frame="17" value="-16.9655" />
                    <Key frame="34" value="5.44688" />
                    <Key frame="51" value="-5.3638" />
                    <Key frame="66" value="11.5114" />
                    <Key frame="83" value="-15.5592" />
                    <Key frame="101" value="17.5759" />
                    <Key frame="125" value="17.5759" />
                    <Key frame="140" value="17.9275" />
                    <Key frame="158" value="17.5759" />
                    <Key frame="173" value="16.5212" />
                    <Key frame="182" value="16.5212" />
                    <Key frame="190" value="17.5759" />
                    <Key frame="196" value="17.5759" />
                    <Key frame="205" value="9.40201" />
                    <Key frame="220" value="15.6423" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                    <Key frame="17" value="43.3282" />
                    <Key frame="34" value="-3.34228" />
                    <Key frame="51" value="-51.0675" />
                    <Key frame="66" value="6.58948" />
                    <Key frame="83" value="-26.9852" />
                    <Key frame="101" value="-45.1788" />
                    <Key frame="125" value="-45.1788" />
                    <Key frame="140" value="-44.7393" />
                    <Key frame="158" value="-45.1788" />
                    <Key frame="173" value="-43.4209" />
                    <Key frame="182" value="-42.9815" />
                    <Key frame="190" value="-45.1788" />
                    <Key frame="196" value="-45.1788" />
                    <Key frame="205" value="-19.6023" />
                    <Key frame="220" value="18.9822" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                    <Key frame="17" value="4.66066" />
                    <Key frame="34" value="4.3091" />
                    <Key frame="51" value="4.39699" />
                    <Key frame="66" value="4.66066" />
                    <Key frame="83" value="4.83644" />
                    <Key frame="101" value="4.83644" />
                    <Key frame="125" value="4.83644" />
                    <Key frame="140" value="4.83644" />
                    <Key frame="158" value="4.83644" />
                    <Key frame="173" value="4.57277" />
                    <Key frame="182" value="4.57277" />
                    <Key frame="190" value="4.83644" />
                    <Key frame="196" value="4.83644" />
                    <Key frame="205" value="4.83644" />
                    <Key frame="220" value="4.83644" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                    <Key frame="17" value="6.3306" />
                    <Key frame="34" value="6.3306" />
                    <Key frame="51" value="6.3306" />
                    <Key frame="66" value="6.68218" />
                    <Key frame="83" value="6.68218" />
                    <Key frame="101" value="6.68218" />
                    <Key frame="125" value="6.68218" />
                    <Key frame="140" value="6.68218" />
                    <Key frame="158" value="6.68218" />
                    <Key frame="173" value="6.68218" />
                    <Key frame="182" value="6.68218" />
                    <Key frame="190" value="6.68218" />
                    <Key frame="196" value="6.68218" />
                    <Key frame="205" value="6.68218" />
                    <Key frame="220" value="6.68218" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                    <Key frame="17" value="77.5229" />
                    <Key frame="34" value="72.5131" />
                    <Key frame="51" value="40.9599" />
                    <Key frame="66" value="41.6631" />
                    <Key frame="83" value="39.29" />
                    <Key frame="101" value="87.8941" />
                    <Key frame="125" value="83.4117" />
                    <Key frame="140" value="88.2457" />
                    <Key frame="158" value="71.8979" />
                    <Key frame="173" value="5.10013" />
                    <Key frame="182" value="59.4172" />
                    <Key frame="190" value="67.8548" />
                    <Key frame="196" value="73.3041" />
                    <Key frame="205" value="65.1302" />
                    <Key frame="220" value="54.8469" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                    <Key frame="17" value="120.409" />
                    <Key frame="34" value="31.7265" />
                    <Key frame="51" value="88.4167" />
                    <Key frame="66" value="70.4868" />
                    <Key frame="83" value="71.5415" />
                    <Key frame="101" value="66.9711" />
                    <Key frame="125" value="93.2507" />
                    <Key frame="140" value="47.1955" />
                    <Key frame="158" value="101.161" />
                    <Key frame="173" value="105.556" />
                    <Key frame="182" value="98.7" />
                    <Key frame="190" value="99.9305" />
                    <Key frame="196" value="96.7664" />
                    <Key frame="205" value="97.4695" />
                    <Key frame="220" value="96.7664" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                    <Key frame="17" value="0.3136" />
                    <Key frame="34" value="0.3136" />
                    <Key frame="51" value="0.7888" />
                    <Key frame="66" value="0.7164" />
                    <Key frame="83" value="0.7204" />
                    <Key frame="101" value="0.7204" />
                    <Key frame="125" value="0.7204" />
                    <Key frame="140" value="0.7212" />
                    <Key frame="158" value="0.7204" />
                    <Key frame="173" value="0.7212" />
                    <Key frame="182" value="0.7212" />
                    <Key frame="190" value="0.7204" />
                    <Key frame="196" value="0.7204" />
                    <Key frame="205" value="0.7228" />
                    <Key frame="220" value="0.7204" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                    <Key frame="17" value="7.02893" />
                    <Key frame="34" value="7.02893" />
                    <Key frame="51" value="7.02893" />
                    <Key frame="66" value="7.3805" />
                    <Key frame="83" value="7.20472" />
                    <Key frame="101" value="7.20472" />
                    <Key frame="125" value="7.20472" />
                    <Key frame="140" value="7.20472" />
                    <Key frame="158" value="7.20472" />
                    <Key frame="173" value="7.20472" />
                    <Key frame="182" value="7.20472" />
                    <Key frame="190" value="7.20472" />
                    <Key frame="196" value="7.20472" />
                    <Key frame="205" value="7.20472" />
                    <Key frame="220" value="7.20472" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                    <Key frame="17" value="-6.67737" />
                    <Key frame="34" value="-6.67737" />
                    <Key frame="51" value="-6.67737" />
                    <Key frame="66" value="-7.02893" />
                    <Key frame="83" value="-6.76526" />
                    <Key frame="101" value="-6.76526" />
                    <Key frame="125" value="-6.76526" />
                    <Key frame="140" value="-6.76526" />
                    <Key frame="158" value="-6.76526" />
                    <Key frame="173" value="-6.76526" />
                    <Key frame="182" value="-6.76526" />
                    <Key frame="190" value="-6.76526" />
                    <Key frame="196" value="-6.76526" />
                    <Key frame="205" value="-6.76526" />
                    <Key frame="220" value="-6.76526" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                    <Key frame="17" value="-9.66569" />
                    <Key frame="34" value="-9.66569" />
                    <Key frame="51" value="-9.66569" />
                    <Key frame="66" value="-9.84147" />
                    <Key frame="83" value="-9.66569" />
                    <Key frame="101" value="-9.66569" />
                    <Key frame="125" value="-9.66569" />
                    <Key frame="140" value="-9.66569" />
                    <Key frame="158" value="-9.66569" />
                    <Key frame="173" value="-9.66569" />
                    <Key frame="182" value="-9.66569" />
                    <Key frame="190" value="-9.66569" />
                    <Key frame="196" value="-9.66569" />
                    <Key frame="205" value="-9.66569" />
                    <Key frame="220" value="-9.66569" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                    <Key frame="17" value="-5.35899" />
                    <Key frame="34" value="-5.35899" />
                    <Key frame="51" value="-5.35899" />
                    <Key frame="66" value="-5.18321" />
                    <Key frame="83" value="-5.53478" />
                    <Key frame="101" value="-5.53478" />
                    <Key frame="125" value="-5.53478" />
                    <Key frame="140" value="-5.53478" />
                    <Key frame="158" value="-5.53478" />
                    <Key frame="173" value="-5.53478" />
                    <Key frame="182" value="-5.53478" />
                    <Key frame="190" value="-5.53478" />
                    <Key frame="196" value="-5.53478" />
                    <Key frame="205" value="-5.53478" />
                    <Key frame="220" value="-5.53478" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                    <Key frame="17" value="20.7449" />
                    <Key frame="34" value="47.0245" />
                    <Key frame="51" value="83.2359" />
                    <Key frame="66" value="59.2414" />
                    <Key frame="83" value="61.3508" />
                    <Key frame="101" value="-1.57965" />
                    <Key frame="125" value="7.12163" />
                    <Key frame="140" value="25.1394" />
                    <Key frame="158" value="9.23104" />
                    <Key frame="173" value="-4.65585" />
                    <Key frame="182" value="34.3681" />
                    <Key frame="190" value="33.6649" />
                    <Key frame="196" value="44.8272" />
                    <Key frame="205" value="80.8628" />
                    <Key frame="220" value="82.1812" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                    <Key frame="17" value="-14.0651" />
                    <Key frame="34" value="17.1365" />
                    <Key frame="51" value="3.51326" />
                    <Key frame="66" value="5.09532" />
                    <Key frame="83" value="3.33748" />
                    <Key frame="101" value="-11.0768" />
                    <Key frame="125" value="9.92936" />
                    <Key frame="140" value="17.1365" />
                    <Key frame="158" value="10.1051" />
                    <Key frame="173" value="-2.37549" />
                    <Key frame="182" value="4.65585" />
                    <Key frame="190" value="6.85315" />
                    <Key frame="196" value="14.1482" />
                    <Key frame="205" value="13.5329" />
                    <Key frame="220" value="-1.32078" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                    <Key frame="17" value="18.1912" />
                    <Key frame="34" value="-32.8739" />
                    <Key frame="51" value="4.48007" />
                    <Key frame="66" value="-30.4129" />
                    <Key frame="83" value="-22.6785" />
                    <Key frame="101" value="29.7929" />
                    <Key frame="125" value="55.8088" />
                    <Key frame="140" value="-8.00056" />
                    <Key frame="158" value="55.8088" />
                    <Key frame="173" value="62.6644" />
                    <Key frame="182" value="61.346" />
                    <Key frame="190" value="28.1229" />
                    <Key frame="196" value="-7.91266" />
                    <Key frame="205" value="-58.3625" />
                    <Key frame="220" value="60.1155" />
                  </ActuatorCurve>
                </ActuatorList>
              </Timeline>
            </Box>
            <Box name="Blink" id="2" localization="8" tooltip="This box makes the robot blink once." x="239" y="292">
              <bitmap>media/images/box/interaction/LED.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05
        self.leds.fadeRGB( "FaceLed0", 0x000000, rDuration, _async=True )
        self.leds.fadeRGB( "FaceLed1", 0x000000, rDuration, _async=True )
        self.leds.fadeRGB( "FaceLed2", 0xffffff, rDuration, _async=True )
        self.leds.fadeRGB( "FaceLed3", 0x000000, rDuration, _async=True )
        self.leds.fadeRGB( "FaceLed4", 0x000000, rDuration, _async=True )
        self.leds.fadeRGB( "FaceLed5", 0x000000, rDuration, _async=True )
        self.leds.fadeRGB( "FaceLed6", 0xffffff, rDuration, _async=True )
        self.leds.fadeRGB( "FaceLed7", 0x000000, rDuration, _async=True )
        time.sleep( 0.1 )
        self.leds.fadeRGB( "FaceLeds", 0xffffff, rDuration )
        self.onDone()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
            </Box>
            <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="423" y="467">
              <bitmap>media/images/box/wait.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
              <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
              <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
              <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
            </Box>
            <Box name="Say" id="3" localization="8" tooltip="Say some text. The text can be localized." x="552" y="207">
              <bitmap>media/images/box/interaction/say.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
              <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="99" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
              <Parameter name="Text" inherits_from_parent="0" content_type="5" value="y quiero enseñarte a caminar" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
              <Resource name="Speech" type="Lock" timeout="0" />
            </Box>
            <Box name="Move To" id="4" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="737" y="170">
              <bitmap>media/images/box/movement/walk_forward.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        self.motion = self.session().service("ALMotion")

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
              <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
              <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
              <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
              <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
              <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
              <Resource name="Legs" type="Lock" timeout="0" />
            </Box>
            <Box name="Stand Up" id="5" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="880" y="134">
              <bitmap>media/images/box/movement/stand.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
              <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
              <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
              <Timeline enable="0">
                <BehaviorLayer name="StandUpBehavior">
                  <BehaviorKeyframe name="DetectRobotPose" index="1">
                    <Diagram>
                      <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                          <Choice value="Crouch" />
                          <Choice value="LyingBack" />
                          <Choice value="LyingBelly" />
                          <Choice value="Sit" />
                          <Choice value="SitRelax" />
                          <Choice value="StandInit" />
                          <Choice value="Stand" />
                          <Choice value="StandZero" />
                        </Parameter>
                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                        <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
              <Resource name="All motors" type="Lock" timeout="0" />
            </Box>
            <Box name="Delay (1)" id="6" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="1042" y="92">
              <bitmap>media/images/box/wait.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
              <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
              <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
              <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
            </Box>
            <Link inputowner="14" indexofinput="2" outputowner="2" indexofoutput="3" />
            <Link inputowner="2" indexofinput="2" outputowner="14" indexofoutput="4" />
            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
            <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
            <Link inputowner="14" indexofinput="3" outputowner="3" indexofoutput="4" />
            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="5" />
            <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="4" />
            <Link inputowner="0" indexofinput="4" outputowner="6" indexofoutput="4" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
